---
to: "<%= `${app}/src/services/${service}/${is_ssr ? 'client' : 'index'}.ts` %>"
---

<%
  ServiceName = h.changeCase.pascal(service)
  ServiceResponseSchema = `${ServiceName}Schema`
  ServiceParser = `parse${ServiceName}`
  ServiceError = `${ServiceName}Error`
  ServiceURL = with_server ? `/api/${service}` : "${API_URL}"
-%>
import { ServiceError, fetcher, type PromiseWithError } from "@lib/fetcher";
<% if (with_server) { -%>
import { ApiErrorSchema } from "@/schemas/api-error";
<% } -%>
import { <%= ServiceResponseSchema %> } from "./schema";
<% if (with_parser) { -%>
import { <%= ServiceParser %> } from "./parser";
<% } -%>
<% if (!with_server) { -%>

const API_URL = "<%= api_url %>";
<% } -%>

<%# TODO: check if ApiErrorSchema is always needed %>
const ApiResponseSchema = <%= ServiceResponseSchema %>.or(ApiErrorSchema);
const <%= ServiceError %> = new ServiceError("<%= ServiceName %>");

export const get<%= ServiceName %> = async (): PromiseWithError<any> => {
  const params = new URLSearchParams({ param: "value" });

  const [error, data] = await fetcher(`<%= ServiceURL %>?${params.toString()}`, {
    schema: ApiResponseSchema,
    serviceError: <%= ServiceError %>,
<% if (with_server || !check_status) { -%>
    checkStatus: false, // allows to read api endpoint errors in response body
<% } -%>
  });

  if (error) return [error];

<% if (with_server) { -%>
  if ("error" in data) return [new Error(data.error)]; // api endpoint error

<% } -%>
  return [null, <%= with_parser ? `${ServiceParser}(data)` : "data" %>];
}
